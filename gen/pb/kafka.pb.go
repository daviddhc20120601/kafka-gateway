// Code generated by protoc-gen-gogo.
// source: kafka.proto
// DO NOT EDIT!

/*
Package kafkapb is a generated protocol buffer package.

It is generated from these files:
	kafka.proto

It has these top-level messages:
	ConsumerRequest
	ConsumerResponse
	ProducerRequest
	ProducerResponse
	ConsumerStreamRequest
	ConsumerStreamResponse
*/
package kafkapb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConsumerRequest struct {
	Topics   []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	ClientId string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *ConsumerRequest) Reset()                    { *m = ConsumerRequest{} }
func (m *ConsumerRequest) String() string            { return proto.CompactTextString(m) }
func (*ConsumerRequest) ProtoMessage()               {}
func (*ConsumerRequest) Descriptor() ([]byte, []int) { return fileDescriptorKafka, []int{0} }

func (m *ConsumerRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ConsumerRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type ConsumerResponse struct {
	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *ConsumerResponse) Reset()                    { *m = ConsumerResponse{} }
func (m *ConsumerResponse) String() string            { return proto.CompactTextString(m) }
func (*ConsumerResponse) ProtoMessage()               {}
func (*ConsumerResponse) Descriptor() ([]byte, []int) { return fileDescriptorKafka, []int{1} }

func (m *ConsumerResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ConsumerResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ProducerRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Key   string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ProducerRequest) Reset()                    { *m = ProducerRequest{} }
func (m *ProducerRequest) String() string            { return proto.CompactTextString(m) }
func (*ProducerRequest) ProtoMessage()               {}
func (*ProducerRequest) Descriptor() ([]byte, []int) { return fileDescriptorKafka, []int{2} }

func (m *ProducerRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ProducerRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ProducerRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ProducerResponse struct {
	Partition int32  `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset    int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ErrMsg    string `protobuf:"bytes,3,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *ProducerResponse) Reset()                    { *m = ProducerResponse{} }
func (m *ProducerResponse) String() string            { return proto.CompactTextString(m) }
func (*ProducerResponse) ProtoMessage()               {}
func (*ProducerResponse) Descriptor() ([]byte, []int) { return fileDescriptorKafka, []int{3} }

func (m *ProducerResponse) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *ProducerResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ProducerResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ConsumerStreamRequest struct {
	Topics   []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	ClientId string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *ConsumerStreamRequest) Reset()                    { *m = ConsumerStreamRequest{} }
func (m *ConsumerStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ConsumerStreamRequest) ProtoMessage()               {}
func (*ConsumerStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptorKafka, []int{4} }

func (m *ConsumerStreamRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ConsumerStreamRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type ConsumerStreamResponse struct {
	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *ConsumerStreamResponse) Reset()                    { *m = ConsumerStreamResponse{} }
func (m *ConsumerStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*ConsumerStreamResponse) ProtoMessage()               {}
func (*ConsumerStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptorKafka, []int{5} }

func (m *ConsumerStreamResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ConsumerStreamResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*ConsumerRequest)(nil), "kafka.ConsumerRequest")
	proto.RegisterType((*ConsumerResponse)(nil), "kafka.ConsumerResponse")
	proto.RegisterType((*ProducerRequest)(nil), "kafka.ProducerRequest")
	proto.RegisterType((*ProducerResponse)(nil), "kafka.ProducerResponse")
	proto.RegisterType((*ConsumerStreamRequest)(nil), "kafka.ConsumerStreamRequest")
	proto.RegisterType((*ConsumerStreamResponse)(nil), "kafka.ConsumerStreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KafkaService service

type KafkaServiceClient interface {
	// unaries
	Consumer(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (*ConsumerResponse, error)
	Producer(ctx context.Context, in *ProducerRequest, opts ...grpc.CallOption) (*ProducerResponse, error)
	// streams
	ConsumerStream(ctx context.Context, in *ConsumerStreamRequest, opts ...grpc.CallOption) (KafkaService_ConsumerStreamClient, error)
}

type kafkaServiceClient struct {
	cc *grpc.ClientConn
}

func NewKafkaServiceClient(cc *grpc.ClientConn) KafkaServiceClient {
	return &kafkaServiceClient{cc}
}

func (c *kafkaServiceClient) Consumer(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (*ConsumerResponse, error) {
	out := new(ConsumerResponse)
	err := grpc.Invoke(ctx, "/kafka.KafkaService/Consumer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaServiceClient) Producer(ctx context.Context, in *ProducerRequest, opts ...grpc.CallOption) (*ProducerResponse, error) {
	out := new(ProducerResponse)
	err := grpc.Invoke(ctx, "/kafka.KafkaService/Producer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaServiceClient) ConsumerStream(ctx context.Context, in *ConsumerStreamRequest, opts ...grpc.CallOption) (KafkaService_ConsumerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KafkaService_serviceDesc.Streams[0], c.cc, "/kafka.KafkaService/ConsumerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &kafkaServiceConsumerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KafkaService_ConsumerStreamClient interface {
	Recv() (*ConsumerStreamResponse, error)
	grpc.ClientStream
}

type kafkaServiceConsumerStreamClient struct {
	grpc.ClientStream
}

func (x *kafkaServiceConsumerStreamClient) Recv() (*ConsumerStreamResponse, error) {
	m := new(ConsumerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KafkaService service

type KafkaServiceServer interface {
	// unaries
	Consumer(context.Context, *ConsumerRequest) (*ConsumerResponse, error)
	Producer(context.Context, *ProducerRequest) (*ProducerResponse, error)
	// streams
	ConsumerStream(*ConsumerStreamRequest, KafkaService_ConsumerStreamServer) error
}

func RegisterKafkaServiceServer(s *grpc.Server, srv KafkaServiceServer) {
	s.RegisterService(&_KafkaService_serviceDesc, srv)
}

func _KafkaService_Consumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServiceServer).Consumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaService/Consumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServiceServer).Consumer(ctx, req.(*ConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaService_Producer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProducerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaServiceServer).Producer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kafka.KafkaService/Producer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaServiceServer).Producer(ctx, req.(*ProducerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaService_ConsumerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KafkaServiceServer).ConsumerStream(m, &kafkaServiceConsumerStreamServer{stream})
}

type KafkaService_ConsumerStreamServer interface {
	Send(*ConsumerStreamResponse) error
	grpc.ServerStream
}

type kafkaServiceConsumerStreamServer struct {
	grpc.ServerStream
}

func (x *kafkaServiceConsumerStreamServer) Send(m *ConsumerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _KafkaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kafka.KafkaService",
	HandlerType: (*KafkaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Consumer",
			Handler:    _KafkaService_Consumer_Handler,
		},
		{
			MethodName: "Producer",
			Handler:    _KafkaService_Producer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumerStream",
			Handler:       _KafkaService_ConsumerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kafka.proto",
}

func init() { proto.RegisterFile("kafka.proto", fileDescriptorKafka) }

var fileDescriptorKafka = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0x29, 0x4d, 0x91, 0x8e, 0x46, 0xc8, 0x06, 0xa1, 0x41, 0x4c, 0x48, 0x4f, 0x1c, 0xb4,
	0x35, 0x7a, 0x34, 0x1e, 0xd4, 0x44, 0x63, 0xd4, 0xa8, 0xe5, 0xe6, 0x85, 0x6c, 0xcb, 0x52, 0x1b,
	0x68, 0xb7, 0xee, 0x6e, 0x31, 0xfc, 0x5a, 0xff, 0x8a, 0xe9, 0xb6, 0xa5, 0x50, 0xe3, 0x45, 0x6f,
	0xbc, 0x47, 0xe7, 0x9b, 0x99, 0x37, 0x0b, 0xbb, 0x73, 0x3c, 0x9b, 0x63, 0x2b, 0x66, 0x54, 0x50,
	0xa4, 0x49, 0x61, 0xde, 0x42, 0xeb, 0x86, 0x46, 0x3c, 0x09, 0x09, 0x73, 0xc8, 0x47, 0x42, 0xb8,
	0x40, 0x5d, 0x68, 0x08, 0x1a, 0x07, 0x1e, 0x37, 0x94, 0xa1, 0x3a, 0xd2, 0x9d, 0x5c, 0xa1, 0x43,
	0xd0, 0xbd, 0x45, 0x40, 0x22, 0x31, 0x09, 0xa6, 0x46, 0x7d, 0xa8, 0x8c, 0x74, 0xa7, 0x99, 0x19,
	0xf7, 0x53, 0xf3, 0x0a, 0xda, 0x25, 0x87, 0xc7, 0x34, 0xe2, 0x04, 0x75, 0x40, 0x5b, 0xe2, 0x45,
	0x42, 0x0c, 0x45, 0x7e, 0x9c, 0x09, 0xd4, 0x83, 0x1d, 0xc2, 0xd8, 0x24, 0xe4, 0x7e, 0x0e, 0x69,
	0x10, 0xc6, 0x9e, 0xb8, 0x6f, 0x3e, 0x43, 0xeb, 0x85, 0xd1, 0x69, 0xe2, 0x95, 0xa3, 0x74, 0x40,
	0x93, 0xcd, 0x0b, 0x82, 0x14, 0x25, 0xb7, 0xbe, 0xc9, 0x6d, 0x83, 0x3a, 0x27, 0x2b, 0x43, 0x95,
	0x5e, 0xfa, 0xd3, 0xc4, 0xd0, 0x2e, 0x81, 0xf9, 0x4c, 0x03, 0xd0, 0x63, 0xcc, 0x44, 0x20, 0x02,
	0x1a, 0x49, 0xaa, 0xe6, 0x94, 0x46, 0xba, 0x3a, 0x9d, 0xcd, 0x38, 0x11, 0x12, 0xad, 0x3a, 0xb9,
	0xda, 0x9c, 0x59, 0xdd, 0x9a, 0xf9, 0x11, 0x0e, 0x8a, 0xb5, 0xc7, 0x82, 0x11, 0x1c, 0xfe, 0x2b,
	0xc4, 0x3b, 0xe8, 0x56, 0x69, 0x7f, 0x8a, 0xf2, 0xec, 0x4b, 0x81, 0xbd, 0x87, 0xf4, 0xbe, 0x63,
	0xc2, 0x96, 0x81, 0x47, 0xd0, 0x25, 0x34, 0x0b, 0x32, 0xea, 0x5a, 0xd9, 0x3b, 0xa8, 0xdc, 0xbd,
	0xdf, 0xfb, 0xe1, 0x67, 0xcd, 0xcd, 0x5a, 0x5a, 0x5e, 0x24, 0xb9, 0x2e, 0xaf, 0xdc, 0x6a, 0x5d,
	0x5e, 0x8d, 0xdc, 0xac, 0xa1, 0x57, 0xd8, 0xdf, 0xde, 0x0b, 0x0d, 0x2a, 0xbd, 0xb6, 0xc2, 0xeb,
	0x1f, 0xfd, 0xf2, 0x6f, 0x01, 0x3c, 0x55, 0xae, 0xad, 0xb7, 0x63, 0x3f, 0x10, 0xef, 0x89, 0x6b,
	0x79, 0x34, 0xb4, 0x43, 0x9a, 0x2c, 0x6c, 0x59, 0x73, 0xe2, 0x63, 0x41, 0x3e, 0xf1, 0xca, 0xf6,
	0x49, 0x64, 0xc7, 0xee, 0x85, 0x34, 0x63, 0xd7, 0x6d, 0xc8, 0x57, 0x7f, 0xfe, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x51, 0xc0, 0xdb, 0xbd, 0x04, 0x03, 0x00, 0x00,
}
